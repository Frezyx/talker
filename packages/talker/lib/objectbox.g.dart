// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/models/talker_data.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 2732766526390766766),
      name: 'TalkerData',
      lastPropertyId: const IdUid(10, 3011623524114326227),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3498377610127543967),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8804727048679347739),
            name: 'message',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2057168434422229462),
            name: 'key',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5171479136116245782),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1327192762666128707),
            name: 'time',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6157106738757531849),
            name: 'logLevelString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4125526427669596463),
            name: 'exceptionMessage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 9082424071939873438),
            name: 'errorMessage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5102783334174280861),
            name: 'stackTraceString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3011623524114326227),
            name: 'penColor',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 2732766526390766766),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    TalkerData: EntityDefinition<TalkerData>(
        model: _entities[0],
        toOneRelations: (TalkerData object) => [],
        toManyRelations: (TalkerData object) => {},
        getId: (TalkerData object) => object.id,
        setId: (TalkerData object, int id) {
          object.id = id;
        },
        objectToFB: (TalkerData object, fb.Builder fbb) {
          final messageOffset =
              object.message == null ? null : fbb.writeString(object.message!);
          final keyOffset =
              object.key == null ? null : fbb.writeString(object.key!);
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final logLevelStringOffset = object.logLevelString == null
              ? null
              : fbb.writeString(object.logLevelString!);
          final exceptionMessageOffset = object.exceptionMessage == null
              ? null
              : fbb.writeString(object.exceptionMessage!);
          final errorMessageOffset = object.errorMessage == null
              ? null
              : fbb.writeString(object.errorMessage!);
          final stackTraceStringOffset = object.stackTraceString == null
              ? null
              : fbb.writeString(object.stackTraceString!);
          final penColorOffset = object.penColor == null
              ? null
              : fbb.writeString(object.penColor!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, messageOffset);
          fbb.addOffset(2, keyOffset);
          fbb.addOffset(3, titleOffset);
          fbb.addInt64(4, object.time.millisecondsSinceEpoch);
          fbb.addOffset(5, logLevelStringOffset);
          fbb.addOffset(6, exceptionMessageOffset);
          fbb.addOffset(7, errorMessageOffset);
          fbb.addOffset(8, stackTraceStringOffset);
          fbb.addOffset(9, penColorOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TalkerData(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              key: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              time: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)))
            ..logLevelString = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..exceptionMessage = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16)
            ..errorMessage = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 18)
            ..stackTraceString = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 20)
            ..penColor = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 22);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [TalkerData] entity fields to define ObjectBox queries.
class TalkerData_ {
  /// see [TalkerData.id]
  static final id =
      QueryIntegerProperty<TalkerData>(_entities[0].properties[0]);

  /// see [TalkerData.message]
  static final message =
      QueryStringProperty<TalkerData>(_entities[0].properties[1]);

  /// see [TalkerData.key]
  static final key =
      QueryStringProperty<TalkerData>(_entities[0].properties[2]);

  /// see [TalkerData.title]
  static final title =
      QueryStringProperty<TalkerData>(_entities[0].properties[3]);

  /// see [TalkerData.time]
  static final time =
      QueryIntegerProperty<TalkerData>(_entities[0].properties[4]);

  /// see [TalkerData.logLevelString]
  static final logLevelString =
      QueryStringProperty<TalkerData>(_entities[0].properties[5]);

  /// see [TalkerData.exceptionMessage]
  static final exceptionMessage =
      QueryStringProperty<TalkerData>(_entities[0].properties[6]);

  /// see [TalkerData.errorMessage]
  static final errorMessage =
      QueryStringProperty<TalkerData>(_entities[0].properties[7]);

  /// see [TalkerData.stackTraceString]
  static final stackTraceString =
      QueryStringProperty<TalkerData>(_entities[0].properties[8]);

  /// see [TalkerData.penColor]
  static final penColor =
      QueryStringProperty<TalkerData>(_entities[0].properties[9]);
}
